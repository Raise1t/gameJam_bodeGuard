from curses import KEY_DOWN
from tkinter.font import families
#from typing_extensions import Self
import pygame
from entity import Entity
from settings import *
from debug import debug


class Player(Entity):
    def __init__(self, pos, groups, obstacle_sprites):
        super().__init__(groups)
        #self.image = pygame.image.load('texture/player.png').convert_alpha()

        self.sprites = []
        self.sprites_idle_right.append(pygame.image.load('texture/Player1/animations/right_idle/idle_1.png').convert_alpha())
        self.sprites_idle_right.append(pygame.image.load('texture/Player1/animations/right_idle/idle_2.png').convert_alpha())
        self.sprites_idle_right.append(pygame.image.load('texture/Player1/animations/right_idle/idle_3.png').convert_alpha())
        self.sprites_idle_right.append(pygame.image.load('texture/Player1/animations/right_idle/idle_4.png').convert_alpha())

        #self.sprites_idle_left
        self.sprites.append(pygame.image.load('texture/Player1/animations/left_idle/idle_1.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left_idle/idle_2.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left_idle/idle_3.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left_idle/idle_4.png').convert_alpha())

        #self.sprites_w_right = []
        self.sprites.append(pygame.image.load('texture/Player1/animations/right/right_1.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/right/right_2.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/right/right_3.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/right/right_4.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/right/right_5.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/right/right_6.png').convert_alpha())            
            
        #self.sprites_w_left = []
        self.sprites.append(pygame.image.load('texture/Player1/animations/left/left_1.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left/left_2.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left/left_3.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left/left_4.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left/left_5.png').convert_alpha())
        self.sprites.append(pygame.image.load('texture/Player1/animations/left/left_6.png').convert_alpha())                      

        #self.sprites_idle_left    

        self.index = 0 #general index for sprites
        self.image = self.sprites_idle_right[self.index]
        self.speed_sprite = 0.25

        #self.image = self.sprites[int(self.current_sprite)]

        self.rect = self.image.get_rect(topleft=pos)

        self.obstacle_sprites = obstacle_sprites
        self.hitbox = self.rect.inflate(-10, 0)

        # stats
        self.stats = {'health': 100, 'attack': 10, 'speed': 8}
        self.health = self.stats['health']
        self.speed = self.stats['speed']

         # atack
        self.attack_right_animation = False
        self.attack_left_animation = False
        # idle
        self.idle_right_animation = True
        self.idle_left_animation = False
        # walking
        self.walk_right_animation = False
        self.walk_left_animation = False

        self.right_direction = True
        self.left_direction = False

    def wich_direction_stop(self): #if player stops, wich direction to look?
        if self.right_direction:
                self.idle_right_animation = True
                self.idle_left_animation = False
                self.walk_right_animation = False
                self.walk_left_animation = False
        if self.left_direction:
                self.idle_left_animation =True    
                self.idle_right_animation = False
                self.walk_right_animation = False
                self.walk_left_animation = False

    def control_animate_direction(self): 

        if self.direction.x == 0 and self.direction.y == 0:
            self.wich_direction_stop()

        elif self.direction.x == -1: #gauche
            self.idle_left_animation = False
            self.idle_right_animation = False
            self.left_direction = True
            self.right_direction = False
            self.walk_right_animation = False
            self.walk_left_animation = True


        elif self.direction.x == 1 :#droite
            self.idle_left_animation = False
            self.idle_right_animation = False
            self.left_direction = False
            self.right_direction = True
            self.walk_right_animation = True
            self.walk_left_animation = False

        elif self.direction.x == -1 and self.direction.y == -1 :# diagonale gauche haut
            self.idle_left_animation = False
            self.idle_right_animation = False
            self.left_direction = True
            self.right_direction = False
            self.walk_right_animation = False
            self.walk_left_animation = True   

        elif self.direction.x == -1 and self.direction.y == 1 :#diagonale gauche bas
            self.idle_left_animation = False
            self.idle_right_animation = False
            self.left_direction = True
            self.right_direction = False
            self.walk_right_animation = False
            self.walk_left_animation = True

        elif self.direction.x == 1 and self.direction.y == -1 :#diagonale droite haut            self.idle_left_animation = False
            self.idle_left_animation = False
            self.idle_right_animation = False
            self.left_direction = False
            self.right_direction = True
            self.walk_right_animation = True
            self.walk_left_animation = False

        elif self.direction.x == 1 and self.direction.y == -1:#diagonale droite bas            self.idle_left_animation = False
            self.idle_left_animation = False
            self.idle_right_animation = False
            self.left_direction = False
            self.right_direction = True
            self.walk_right_animation = True
            self.walk_left_animation = False  

        elif self.direction.x == 0 and self.direction.y == -1: # haut
            if self.right_direction:
                self.idle_left_animation = False
                self.idle_right_animation = False
                self.left_direction = False
                self.right_direction = True
                self.walk_right_animation = True
                self.walk_left_animation = False

            if self.left_direction:
                self.idle_left_animation = False
                self.idle_right_animation = False
                self.left_direction = True
                self.right_direction = False
                self.walk_right_animation = False
                self.walk_left_animation = True

        elif self.direction.x == 0 and self.direction.y == 1: # bas
            if self.right_direction:
                self.idle_left_animation = False
                self.idle_right_animation = False
                self.left_direction = False
                self.right_direction = True
                self.walk_right_animation = True
                self.walk_left_animation = False

            if self.left_direction:
                self.idle_left_animation = False
                self.idle_right_animation = False
                self.left_direction = True
                self.right_direction = False
                self.walk_right_animation = False
                self.walk_left_animation = True            


    def input(self):
        key = pygame.key.get_pressed()
        if key[pygame.K_z] or key[pygame.K_UP]:
            self.direction.y = -1

        elif key[pygame.K_s] or key[pygame.K_DOWN]:
            self.direction.y = 1
            
        else:
            self.direction.y = 0

        if key[pygame.K_d] or key[pygame.K_RIGHT]:
            self.direction.x = 1
        elif key[pygame.K_q] or key[pygame.K_LEFT]:
            self.direction.x = -1
            #self.left_w_direction() 
        else:
            self.direction.x = 0

            # ANIMATIONS CONTROLER-----------------------------

    
    def idle_animate(self):
        if self.idle_right_animation == True and self.right_direction == True:
            self.index += self.speed_sprite  # speed standard
            if self.index >= len(self.sprites_idle_right):
               self.index = 0
        self.image = self.sprites_idle_right[int(self.index)]

        if self.idle_left_animation == True and self.left_direction == True:
            self.index += self.speed_sprite  # speed standard
            if int(self.index) >= len(self.sprites_idle_left):
                self.index = 0
        self.image = self.sprites_idle_left[int(self.index)]

    def right_animate(self):
        if self.walk_right_animation and self.right_direction:
            self.index += self.speed_sprite
            if self.index >= len(self.sprites_w_right):
               self.index = 0
        self.image = self.sprites_w_right[int(self.index)]

    def left_animate(self):
        if self.walk_left_animation and self.left_direction:
            self.index += self.speed_sprite
            if self.index >= len(self.sprites_w_left):
               self.index = 0 
               print('left condition')
                #self.walk_left_animation = False
        self.image = self.sprites_w_left[int(self.index)]
        print('left animation')        

    def animate(self):
        print('uwu')
        self.control_animate_direction()
        self.idle_animate()
        self.right_animate()
        self.left_animate()
        

    def update(self):
        self.input()
        self.animate()
        self.move(self.speed)
        #if pygame.time.get_ticks() >= DAY_DURATION:
         #   self.animate()  